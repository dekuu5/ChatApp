// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}



model User {
  id           Int        @id @default(autoincrement())
  createdAt    DateTime   @default(now())
  email        String?    @unique
  username     String?    @unique
  password     String
  name         String
  profileImage String?

  // ChatRoom relationships
  chatRooms1   ChatRoom[] @relation("User1ChatRooms")
  chatRooms2   ChatRoom[] @relation("User2ChatRooms")
  
  // GroupChat relationships
  groupChats   GroupChat[] @relation("GroupChatParticipants")
  groupChatAdmin GroupChat[] @relation("GroupChatAdmin")
  // Friends relationships
  sentFriendRequests Friends[] @relation("SentFriendRequests")
  receivedFriendRequests Friends[] @relation("ReceivedFriendRequests")
  
  // Messages relationship
  messages     Message[]
}

model ChatRoom {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  name      String
  userId1   Int
  userId2   Int
  
  // Participants
  user1     User     @relation("User1ChatRooms", fields: [userId1], references: [id])
  user2     User     @relation("User2ChatRooms", fields: [userId2], references: [id])
  
  // Messages in the chat room
  messages  Message[]
}

model GroupChat {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  name      String
  adminId   Int
  
  // Participants
  participants User[] @relation("GroupChatParticipants")
  admin User @relation("GroupChatAdmin", fields: [adminId], references: [id])
  // Messages in the group chat
  messages  Message[]
  
  // Owner relationship
}

model Friends {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  userId1   Int
  userId2   Int
  
  // Relationships
  user1 User @relation("SentFriendRequests", fields: [userId1], references: [id])
  user2 User @relation("ReceivedFriendRequests", fields: [userId2], references: [id])
}

model Message {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  text      String
  userId    Int
  chatRoomId Int
  groupChatId Int
  // Relationships
  user      User     @relation(fields: [userId], references: [id])
  chatRoom  ChatRoom? @relation(fields: [chatRoomId], references: [id])
  groupChat GroupChat? @relation(fields: [groupChatId], references: [id])

}
